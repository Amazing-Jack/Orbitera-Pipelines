pipelines:
  - name: Gradle
    configuration:
      environmentVariables:
        readOnly:
          Version: 1.0.$run_number
          dockerImage: 34.107.168.13/team1-docker/gradle-app

    steps:
      - name: gradle_bld_svc_demo
        type: GradleBuild
        configuration:
          runtime:
            type: image
            image:
             custom:
              name: docker.bintray.io/jfrog/pipelines-u16java
              tag: "8"
          gradleCommand:        clean artifactoryPublish -b build.gradle
          sourceLocation:       tutorial/step1-create-gradle-app
          configFileLocation:   .
          configFileName:       jfrog-gradle.yml
          forceXrayScan:        false
          autoPublishBuildInfo: true
          inputResources:
            - name: orbitera_gitRepo_demo
          outputResources:
            - name: gradleBuildInfo
          integrations:
            - name: artifactory
        execution:
          onStart:
            - export artifactory_plugins_url="${int_artifactory_url}"/jcenter-gradle-remote
            - export artifactory_libs_url="${int_artifactory_url}"/team1-gradle
            - printenv
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "Something went terribly wrong"
          onComplete: #always
            - echo "Cleaning up some stuff"
            
            
      - name: gradle_scan
        type: XrayScan
        configuration:
          #inherits from bash
          waitUntilFinish: true
          inputResources:
            - name: gradleBuildInfo        
              trigger: true
          outputResources: 
            - name: scanned_gradleBuild_Info
        execution:
          onStart:
            - echo "Preparing to scan artifacts..."
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete: #always
            - echo "Cleaning up some stuff"
          onCancel:
            - echo "Someone cancelled the job"
            
                     
      - name: gradle_promote
        type: PromoteBuild
        configuration:
          targetRepository:      team1-gradle-staging-us 
          includeDependencies:   false   
          status:                Passed
          comment:               Artifact passed Xray Scan
          copy:                  true
          inputResources:
            - name:    scanned_gradleBuild_Info    # optional
              trigger: true       
          outputResources:
            - name: promoted_gradleBuild_Info



      - name: Gradle_docker_build
        type: DockerBuild
        configuration:
          dockerFileLocation: tutorial/step3-create-docker-multi-app
          dockerFileName: Dockerfile
          dockerImageName: ${dockerImage}
          dockerImageTag: ${Version}
          inputResources:
            - name: orbitera_gitRepo_demo
            - name: gradle_fileSpec
            - name: promoted_gradleBuild_Info
              trigger: true
          integrations:
            - name: artifactory
        execution:
          onStart:
            - printenv
            - mkdir -p tutorial/step3-create-docker-multi-app/package
          onSuccess:
            - ls tutorial/step3-create-docker-multi-app/package
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete: #always
            - echo "Cleaning up some stuff"

      - name: Gradle_docker_push
        type: DockerPush
        configuration:
          targetRepository:     team1-docker     # required
          forceXrayScan:        false
          autoPublishBuildInfo: true
          integrations:
            - name:  artifactory
          inputSteps:
            - name: Gradle_docker_build         # required
          outputResources:
            - name: docker_gradleBuild_Info     # required if autoPublishBuildInfo is true
 
       

 
