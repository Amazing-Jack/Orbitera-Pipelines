resources:
  - name: orbitera_gitRepo_demo
    type: GitRepo
    configuration:
      path: yairbass/project-examples
      gitProvider: YairBassGitHub
      branches:
        include: eplus-v2-orbitera

  - name: gradleBuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: art
      buildName: gradle_build
      buildNumber: 1


  - name: npmBuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: art
      buildName: npm_build
      buildNumber: 1



pipelines:
  - name: gradle_build
    steps:
      - name: gradle_bld_svc_demo
        type: GradleBuild
        configuration:
          runtime:
            type: image
            image:
             custom:
              name: docker.bintray.io/jfrog/pipelines-u18java
              tag: "8"
          gradleCommand:        clean artifactoryPublish -b build.gradle
          sourceLocation:       tutorial/step1-create-gradle-app
          configFileLocation:   .
          configFileName:       jfrog-gradle.yml
          forceXrayScan:        true
          autoPublishBuildInfo: true
          inputResources:
            - name: orbitera_gitRepo_demo
          outputResources:
            - name: gradleBuildInfo
          integrations:
            - name: art
        execution:
          onStart:
            - export artifactory_plugins_url="${int_art_url}"/jcenter-gradle-remote
            - export artifactory_libs_url="${int_art_url}"/team1-gradle
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "Something went terribly wrong"
          onComplete: #always
            - echo "Cleaning up some stuff"
            
            
#       - name: GradleScan
#         type: XrayScan
#         configuration:
#           #inherits from bash
#           waitUntilFinish: true
#           inputResources:
#             - name: gradleBuildInfo        
#               trigger: true
#         execution:
#           onStart:
#             - echo "Preparing to scan artifacts..."
#           onSuccess:
#             - echo "Job well done!"
#           onFailure:
#             - echo "uh oh, something went wrong"
#           onComplete: #always
#             - echo "Cleaning up some stuff"
#           onCancel:
#             - echo "Someone cancelled the job"

  - name: NPM
    steps:
      - name: npm_build
        type: NpmBuild
        configuration:
          runtime:
            type: image
            image:
              custom:
                name: docker.bintray.io/jfrog/pipelines-u18node
                tag: "10.16.3"
          npmArgs:   install shelljs
          repositoryName:   team1-npm
          sourceLocation:   tutorial/step2-create-ui-pkg
          integrations:
            - name: art
          inputResources:
            - name: orbitera_gitRepo_demo
        execution:
          onStart:
            - printenv
          onSuccess:
            - jfrog rt npm-install team1-npm --build-name=npm_build --build-number="${build_number}"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete:
            - echo "Cleaning up some stuff"


      - name: npm_publish
        type: NpmPublish
        configuration:
          repositoryName:       team1-npm
          forceXrayScan:        false
          autoPublishBuildInfo: true
          integrations:
            - name: art
          inputSteps:
            - name: npm_build
          outputResources:
            - name: npmBuildInfo
        execution:
          onStart:
            - echo "Preparing for work..."
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete: #always
            - echo "Cleaning up some stuff"
